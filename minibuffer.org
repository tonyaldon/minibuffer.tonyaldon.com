* minibuffer
:PROPERTIES:
:ONE: minibuffer-one-home
:CUSTOM_ID: /
:MINIBUFFER_CREATED_AT: [2022-11-22 Tue]
:END:
* How to match 47 characters in a string with Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-08-22-how-to-match-47-characters-in-a-string-with-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-08-28 Mon]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=xfIuFNpfYWI
:END:

#+BEGIN_SRC emacs-lisp
(setq
 link
 "[[abbrv:assets/archive/2023-08-09_9c6b04b4-0076-44d0-a241-063a2d899544_2023-08-22T17:43:44+0200.html]]")

(progn
  (string-match "archive/\\(.\\{47\\}\\)" link)
  (match-string 1 link))
#+END_SRC

* How to put the value of an Org property in the kill-ring?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-08-23-how-to-put-the-value-of-an-org-property-in-the-kill-ring/
:MINIBUFFER_CREATED_AT: [2023-08-28 Mon]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=WnjrpR1sUKM
:END:

#+BEGIN_SRC emacs-lisp
(org-entry-get nil "foo")
(kill-new (org-entry-get nil "foo"))
(kill-new (concat (org-entry-get nil "foo") "-baz"))
#+END_SRC

* Do you know how to generate html strings with Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-08-24-do-you-know-how-to-generate-html-strings-with-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-08-28 Mon]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=Gn2HjXwHhHg
:END:

#+BEGIN_SRC emacs-lisp
(require 'jack) ;; https://jack.tonyaldon.com

(with-temp-file "index.html"
  (insert
   (jack-html
    '(:ul
      (:li "foo-0")
      (:li "foo-1")
      (:li "foo-2")))))

;; need `prettier' utility installed - https://prettier.io
(call-process-shell-command "prettier --write index.html" nil 0)
#+END_SRC

- https://jack.tonyaldon.com
- https://prettier.io

* How to add html attributes with the Emacs package Jack?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-08-25-how-to-add-html-attributes-with-the-emacs-package-jack/
:MINIBUFFER_CREATED_AT: [2023-08-28 Mon]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=68NS_2afPw8
:END:

#+BEGIN_SRC emacs-lisp
(require 'jack) ;; https://jack.tonyaldon.com

(jack-html '(:div "foo")) ;; "<div>foo</div>"
(jack-html '(:div (@ :id "myid" :class "myclass") "foo"))
;; "<div id=\"myid\" class=\"myclass\">foo</div>"
(jack-html '(:div/id.myclass1.myclass2 "foo"))
;; "<div id=\"id\" class=\"myclass1 myclass2\">foo</div>"
#+END_SRC

- https://jack.tonyaldon.com

* How to check for a regexp match after point with Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-08-26-how-to-check-for-a-regexp-match-after-point-with-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-08-28 Mon]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=cxpTi11pYXI
:END:

#+BEGIN_SRC emacs-lisp
(looking-at "bar")
(looking-at "foo")
(when (looking-at "foo") (insert "---"))
(when (looking-at "bar") (insert "---"))
#+END_SRC

* How to insert foo at the end of buffer without changing point with Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-08-27-how-to-insert-foo-at-the-end-of-buffer-without-changing-point-with-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-08-28 Mon]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=KA3cghsUVaM
:END:

#+BEGIN_SRC emacs-lisp
(save-excursion
  (goto-char (point-max))
  (insert "foo"))
#+END_SRC

* How to check for the states of buffer-local variables in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-08-28-how-to-check-for-the-states-of-buffer-local-variables-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-08-28 Mon]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=HhGVR7xhXis
:END:

#+BEGIN_SRC emacs-lisp
;; M-x pp-eval-expression
(buffer-local-variables)
;; major-mode
;; buffer-read-only
#+END_SRC

* How to turn a function into a command in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-08-29-how-to-turn-a-function-into-a-command-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-08-29 Tue]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=z8IJz25EDeA
:END:

#+BEGIN_SRC emacs-lisp
(defun foo ()
  "Print \"bar\""
  (interactive)
  (message "bar"))

(foo)

(global-set-key (kbd "C-<f1>") #'foo)
#+END_SRC

* How to insert strings in a given buffer in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-08-30-how-to-insert-strings-in-a-given-buffer-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-08-30 Wed]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=QXlmNjYpjNY
:END:

#+BEGIN_SRC emacs-lisp
(with-current-buffer (get-buffer-create "*foo*")
  (erase-buffer)
  (insert "foo"))
#+END_SRC

* How to list files in a given directory in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-08-31-how-to-list-files-in-a-given-directory-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-08-31 Thu]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=5PgMa8bzcv4
:END:

#+BEGIN_SRC emacs-lisp
(directory-files-and-attributes ".")
(directory-files-and-attributes "." t)
(dolist (f (directory-files-and-attributes "./emacs/" t))
  (message (car f)))
#+END_SRC

* How to replace regexp in buffers in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-01-how-to-replace-regexp-in-buffers-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-09-01 Fri]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=sPup0RjLLmo
:END:

Note: Although it works, how I used ~replace-regexp~ in this video is
not recommended in Elisp programs in general.

#+BEGIN_SRC emacs-lisp
(replace-regexp "-b" "^^^^")
(replace-regexp "-b" "^^^^" nil (point-min) (point-max))
(replace-regexp "-b" "^^^^" nil (point-at-bol) (point-at-eol))
#+END_SRC

* How to search for regexp in buffers in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-02-how-to-search-for-regexp-in-buffers-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-09-02 Sat]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=LD7dNcBavnI
:END:

#+BEGIN_SRC emacs-lisp
(re-search-forward "^foo")
(point)
(re-search-forward "^foo" nil t)
(re-search-forward "^foo" 103 t)
#+END_SRC

* What influence does case-fold-search have on searches in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-03-what-influence-does-case-fold-search-have-on-searches-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-09-03 Sun]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=eGZCZe5qLUE
:END:

#+BEGIN_SRC emacs-lisp
case-fold-search ;; t
(let ((case-fold-search nil))
  (re-search-forward "^foo"))
(let ((case-fold-search t))
  (re-search-forward "^Foo"))
#+END_SRC

* How to manipulate the match data in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-04-how-to-manipulate-the-match-data-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-09-04 Mon]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=G6bNaoyKW4c
:END:

#+BEGIN_SRC emacs-lisp
(re-search-forward "foo-\\(.*\\)-baz")
(progn
  (re-search-forward "foo-\\(.*\\)-baz")
  (match-string 0))
(progn
  (re-search-forward "foo-\\(.*\\)-baz")
  (match-string 1))
(progn
  (re-search-forward "foo-\\(.*\\)-baz")
  (replace-match "^^^"))
(progn
  (re-search-forward "foo-\\(.*\\)-baz")
  (replace-match "^^^" nil nil nil 1))
#+END_SRC

* How to replace regexp in buffers in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-05-how-to-replace-regexp-in-buffers-in-emacs-lisp-with-a-while-loop/
:MINIBUFFER_CREATED_AT: [2023-09-05 Tue]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=CV_YB4t0JcQ
:END:

#+BEGIN_SRC emacs-lisp
(replace-regexp "foo" "XXX")
(while (re-search-forward "foo" nil t)
  (replace-match "XXX"))
#+END_SRC

* How to get the content in buffers in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-06-how-to-get-the-content-in-buffers-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-09-06 Wed]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=H987Y7FxiJw
:END:

#+BEGIN_SRC emacs-lisp
(buffer-substring (point-at-bol 3) (point-at-eol 3))
(buffer-substring-no-properties (point-at-bol 3) (point-at-eol 3))
#+END_SRC

* How to manipulate vectors in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-07-how-to-manipulate-vectors-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-09-07 Thu]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=71U2FqCw7zQ
:END:

#+BEGIN_SRC emacs-lisp
(vector (+ 1 1) nil "foo") ;; [2 nil "foo"]
[(+ 1 1) nil "foo"] ;; [(+ 1 1) nil "foo"]

(setq vec1 [a b c]) ;; [a b c]
(aref vec1 0) ;; a
(aset vec1 0 'foo) ;; foo
vec1 ;; [foo b c]

(setq vec2 (seq-copy vec1)) ;; [foo b c]
(aset vec2 0 'bar) ;; bar
vec2 ;; [bar b c]
vec1 ;; [foo b c]
#+END_SRC

* How to swap elements in vectors in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-08-how-to-swap-elements-in-vectors-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-09-08 Fri]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=W_FAwDN01No
:END:

#+BEGIN_SRC emacs-lisp
(setq vec [foo bar baz]) ;; [foo bar baz]
(aref vec 0) ;; foo
(aref vec 2) ;; baz
(cl-rotatef (aref vec 0) (aref vec 2))
vec ;; [baz bar foo]
#+END_SRC

* How to run a unix utility on file at point in dired in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-09-how-to-run-a-unix-utility-on-file-at-point-in-dired-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-09-09 Sat]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=0kzbFsRB4vk
:END:

#+BEGIN_SRC emacs-lisp
(let* ((fn (dired-file-name-at-point))
       (fn-base (file-name-base fn))
       (cmd (format "convert %s %s" fn (concat fn-base ".jpg"))))
  (shell-command cmd))
#+END_SRC

* How to copy the current line below in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-10-how-to-copy-the-current-line-below-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-09-10 Sun]
:MINIBUFFER_UPDATED_AT: [2023-09-11 Mon]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=IbrgXydt6iM
:END:

#+BEGIN_SRC emacs-lisp
(defun copy-current-line-below ()
  "Copy current line and past it below"
  (interactive)
  (let ((line (buffer-substring (point-at-bol) (point-at-eol))))
    (save-excursion
      (forward-line)
      (insert line "\n"))))
#+END_SRC

You might be interested in:

- [[#/2023-09-06-how-to-get-the-content-in-buffers-in-emacs-lisp/][How to get the content in buffers in Emacs Lisp?]] (~buffer-substring~) and
- [[#/2023-08-27-how-to-insert-foo-at-the-end-of-buffer-without-changing-point-with-emacs-lisp/][How to insert foo at the end of buffer without changing point with
  Emacs Lisp?]] (~save-excursion~).

* How to start a shell in a window below in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-11-how-to-start-a-shell-in-a-window-below-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-09-11 Mon]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=3tybE9IYKuA
:END:

#+BEGIN_SRC emacs-lisp
(progn
  (select-window (split-window-below -8))
  (shell))
#+END_SRC

* How to move the point around in buffers in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-12-how-to-move-the-point-around-in-buffers-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-09-12 Tue]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=6e5cyzo6b-s
:END:

#+BEGIN_SRC emacs-lisp
(point) ;; 349
(point-min) ;; 1
(point-max) ;; 385
(goto-char 349)
(goto-char (point-min))
(goto-char (point-max))

(forward-char 4)
(backward-char 4)

(beginning-of-line)
(end-of-line)
#+END_SRC

* How to stop displaying calls to message in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-13-how-to-stop-displaying-calls-to-message-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-09-13 Wed]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=I-uEaHCNkLc
:END:

#+BEGIN_SRC emacs-lisp
(defun my-call-to-message ()
  (message "foo")
  (sleep-for 2))

(let ((inhibit-message t))
  (my-call-to-message))
#+END_SRC

* How to save and restore the selected window in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-14-how-to-save-and-restore-the-selected-window-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-09-14 Thu]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=8OkiWhQ1vOM
:END:

#+BEGIN_SRC emacs-lisp
(save-selected-window
  (other-window 1)
  (insert "bar\n"))
#+END_SRC

* How to loop over the window list of the selected frame in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-15-how-to-loop-over-the-window-list-of-the-selected-frame-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-09-15 Fri]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=gHBeAaV6yDg
:END:

#+BEGIN_SRC emacs-lisp
(window-list) ;; (#<window 3 on notes.el> #<window 11 on foo> #<window 13 on bar>)
(window-list nil t) ;; (#<window 3 on notes.el> #<window 11 on foo> #<window 13 on bar> #<window 4 on  *Minibuf-0*>)
(window-buffer (selected-window)) ;; #<buffer notes.el>
(dolist (w (window-list))
  (message "%S" (window-buffer w)))
#+END_SRC

* How to select a word in a list with minibuffer completion in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-16-how-to-select-a-word-in-a-list-with-minibuffer-completion-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-09-16 Sat]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=4-SlzJL9JiI
:END:

#+BEGIN_SRC emacs-lisp
(defun select-word-with-minibuffer-completion ()
  "Select a word with minibuffer completion."
  (interactive)

  (let ((word (completing-read "Select word: " '("foo" "bar" "baz"))) ;; match not required
        ;; (word (completing-read "Select word: " '("foo" "bar" "baz") nil t)) ;; match required
        )
    (message "%s" word)))

(global-set-key (kbd "C-<f1>") #'select-word-with-minibuffer-completion)
#+END_SRC

* How to write buffer region into a file in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-17-how-to-write-buffer-region-into-a-file-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-09-17 Sun]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=yzlCqStHIhs
:END:

#+BEGIN_SRC emacs-lisp
(write-region (point-at-bol) (point-at-eol) "foo.txt")
(write-region nil nil "foo.txt")
(write-region nil nil "foo.txt" t)
(write-region "foo" nil "foo.txt")

(progn
  (make-directory "foo/bar" t)
  (write-region nil nil "foo/bar/baz.txt"))
#+END_SRC

* How to display the documentation of the symbol at point Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-18-how-to-display-the-documentation-of-the-symbol-at-point-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-09-18 Mon]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=Y5WLDmWaBNg
:END:

#+BEGIN_SRC emacs-lisp
(defun symbol-description-at-point ()
  "Display documentation of symbol at point."
  (interactive)
  (when-let ((symbol (symbol-at-point)))
    (describe-symbol symbol)))

(global-set-key (kbd "C-<f1>") #'symbol-description-at-point)
#+END_SRC

* Do you know about the Emacs Lisp function split-line?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-19-do-you-know-about-the-emacs-lisp-function-split-line/
:MINIBUFFER_CREATED_AT: [2023-09-19 Tue]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=eLp9qyGM3GU
:END:

#+BEGIN_SRC emacs-lisp
(defun new-line-above ()
  "Add an empty line above and move the cursor to this line."
  (interactive)
  (back-to-indentation)
  (split-line))

(global-set-key (kbd "C-<f1>") #'new-line-above)
#+END_SRC

* How to make Emacs unusable using the hook post-self-insert-hook?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-20-how-to-make-emacs-unusable-using-the-hook-post-self-insert-hook/
:MINIBUFFER_CREATED_AT: [2023-09-20 Wed]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=O09FjRyjXLU
:END:

#+BEGIN_SRC emacs-lisp
(defun insert-^^ () (insert "^^"))

(add-hook 'post-self-insert-hook #'insert-^^)
(remove-hook 'post-self-insert-hook #'insert-^^)
#+END_SRC

* How to define a command that works on the selected region in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-21-how-to-define-a-command-that-works-on-the-selected-region-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-09-21 Thu]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=ZwYU1v3Abug
:END:

#+BEGIN_SRC emacs-lisp
(defun command-on-region (beg end)
  "..."
  (interactive "r")
  (message "beg: %s\nend: %s" beg end)
  (deactivate-mark))

(global-set-key (kbd "C-<f1>") #'command-on-region)
#+END_SRC

* How to check that we have reached the end of buffer in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-22-how-to-check-that-we-have-reached-the-end-of-buffer-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-09-22 Fri]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=H_Q_PFREJeY
:END:

#+BEGIN_SRC emacs-lisp
(while (not (eobp))
  (message "%s: %s"
           (line-number-at-pos)
           (buffer-substring-no-properties (point-at-bol) (point-at-eol)))
  (forward-line))
#+END_SRC

* How to run some Emacs Lisp code in batch mode?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-23-how-to-run-some-emacs-lisp-code-in-batch-mode/
:MINIBUFFER_CREATED_AT: [2023-09-23 Sat]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=psZbG0HEHSs
:END:

#+BEGIN_SRC tms
◉ tony@tony:~/minibuffer:
$ emacs --batch
◉ tony@tony:~/minibuffer:
$ emacs --batch --eval '(+ 1 1)'
◉ tony@tony:~/minibuffer:
$ emacs --batch --eval '(message "%s" (+ 1 1))'
2
◉ tony@tony:~/minibuffer:
$ emacs --batch --eval '(message "%s" (+ 1 1))' 2>err
◉ tony@tony:~/minibuffer:
$ cat err
2
◉ tony@tony:~/minibuffer:
$ emacs --batch --eval '(princ (+ 1 1))'
2◉ tony@tony:~/minibuffer:
$ emacs --batch --eval '(princ (+ 1 1))' 2>err
2◉ tony@tony:~/minibuffer:
$ emacs --batch --eval '(princ (read-string ""))'
^C◉ tony@tony:~/minibuffer:
$ echo foo | emacs --batch --eval '(princ (read-string ""))'
foo
#+END_SRC

* How to run some Emacs Lisp code in batch mode #2?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-24-how-to-run-some-emacs-lisp-code-in-batch-mode-2/
:MINIBUFFER_CREATED_AT: [2023-09-24 Sun]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=zh_q-eeHOqw
:END:

#+BEGIN_SRC tms
◉ tony@tony:~/minibuffer:
$ echo How to run some Emacs Lisp code in batch mode \#2?
How to run some Emacs Lisp code in batch mode #2?
◉ tony@tony:~/minibuffer:
$ emacs --batch --eval '(princ (read-string ""))'
foo
foo◉ tony@tony:~/minibuffer:
$ emacs --batch --load my-elisp.el
bar
bar◉ tony@tony:~/minibuffer:
$ emacs --batch --load my-elisp.el --eval '(princ bar)'
foo
I'm foo◉ tony@tony:~/minibuffer:
$
#+END_SRC

~my-elisp.el~:

#+BEGIN_SRC emacs-lisp
(setq foo (read-string ""))
(setq bar (concat "I'm " foo))
#+END_SRC

* How to write tests in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-25-how-to-write-tests-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-09-25 Mon]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=H5FxcTh3QrI
:END:

#+BEGIN_SRC emacs-lisp
(defun foo ()
    "..."
  "bar")

(ert-deftest foo-test ()
  (should (string= (foo) "bar")))
#+END_SRC

* How to throw and test errors in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-26-how-to-throw-and-test-errors-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-09-26 Tue]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=qW6q8HeHt0s
:END:

#+BEGIN_SRC emacs-lisp
(defun foo (x)
  "Return x.  If x < 0, throw an error."
  (if (< x 0)
      (error "%s is negative" x)
    x))

(ert-deftest foo-test ()
  (should (= (foo 10) 10))
  (should-error (foo -1)))

(foo -1)
#+END_SRC

* What does Org parsed tree look like in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-27-what-does-org-parsed-tree-look-like-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-09-27 Wed]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=We5X5mfmWz8
:END:

#+BEGIN_SRC emacs-lisp
(org-element-parse-buffer)
#+END_SRC

#+BEGIN_SRC org
,#+title: What does Org parsed tree look like in Emacs Lisp?

,* foo
,** foo level 2

- item 1
- item 2
- item 3

,* bar

,#+BEGIN_SRC bash
echo foo bar baz
,#+END_SRC

,* baz

,#+BEGIN_SRC emacs-lisp
(org-element-parse-buffer)
,#+END_SRC
#+END_SRC

#+BEGIN_SRC emacs-lisp
(org-data
 nil
 (section
  (:begin 1 :end 62 :contents-begin 1 :contents-end 61
   :post-blank 1 :post-affiliated 1 :parent #0)
  (keyword
   (:key "TITLE" :value "What does Org parsed tree look like in Emacs Lisp?"
    :begin 1 :end 61 :post-blank 0 :post-affiliated 1 :parent #1)))
 (headline
  (:raw-value "foo" :begin 62 :end 112 :pre-blank 0 :contents-begin 68 :contents-end 111
   :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil
   :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 62
   :title (#("foo" 0 3 (:parent #1)))
   :parent #0)
  (headline
   (:raw-value "foo level 2" :begin 68 :end 111 :pre-blank 1 :contents-begin 84 :contents-end 111
    :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0
    :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 68
    :title (#("foo level 2" 0 11 (:parent #2)))
    :parent #1)
   (section
    (:begin 84 :end 112 :contents-begin 84 :contents-end 111
     :post-blank 1 :post-affiliated 84 :parent #2)
    (plain-list
     (:type unordered :begin 84 :end 111 :contents-begin 84 :contents-end 111
      :structure ((84 0 "- " nil nil nil 93)
                  (93 0 "- " nil nil nil 102)
                  (102 0 "- " nil nil nil 111))
      :post-blank 0 :post-affiliated 84 :parent #3)
     (item
      (:bullet "- " :begin 84 :end 93 :contents-begin 86 :contents-end 93
       :checkbox nil :counter nil
       :structure ((84 0 "- " nil nil nil 93)
                   (93 0 "- " nil nil nil 102)
                   (102 0 "- " nil nil nil 111))
       :pre-blank 0 :post-blank 0 :post-affiliated 84 :tag nil :parent #4)
      (paragraph
       (:begin 86 :end 93 :contents-begin 86 :contents-end 93 :post-blank 0
        :post-affiliated 86 :parent #5)
       #("item 1\n" 0 7 (:parent #6))))
     (item
      (:bullet "- " :begin 93 :end 102 :contents-begin 95 :contents-end 102
       :checkbox nil :counter nil
       :structure ((84 0 "- " nil nil nil 93)
                   (93 0 "- " nil nil nil 102)
                   (102 0 "- " nil nil nil 111))
       :pre-blank 0 :post-blank 0 :post-affiliated 93 :tag nil :parent #4)
      (paragraph
       (:begin 95 :end 102 :contents-begin 95 :contents-end 102
        :post-blank 0 :post-affiliated 95 :parent #5)
       #("item 2\n" 0 7 (:parent #6))))
     (item
      (:bullet "- " :begin 102 :end 111 :contents-begin 104 :contents-end 111
       :checkbox nil :counter nil
       :structure ((84 0 "- " nil nil nil 93)
                   (93 0 "- " nil nil nil 102)
                   (102 0 "- " nil nil nil 111))
       :pre-blank 0 :post-blank 0 :post-affiliated 102 :tag nil :parent #4)
      (paragraph
       (:begin 104 :end 111 :contents-begin 104 :contents-end 111
        :post-blank 0 :post-affiliated 104 :parent #5)
       #("item 3\n" 0 7 (:parent #6))))))))
 (headline
  (:raw-value "bar" :begin 112 :end 164 :pre-blank 1 :contents-begin 119 :contents-end 163
   :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1
   :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 112
   :title (#("bar" 0 3 (:parent #1)))
   :parent #0)
  (section
   (:begin 119 :end 164 :contents-begin 119 :contents-end 163 :post-blank 1 :post-affiliated 119
    :parent #1)
   (src-block
    (:language "bash" :switches nil :parameters nil :begin 119 :end 163 :number-lines nil
     :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil
     :value "echo foo bar baz\n" :post-blank 0 :post-affiliated 119 :parent #2))))
 (headline
  (:raw-value "baz" :begin 164 :end :pre-blank 1 :contents-begin 171 :contents-end 231
   :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0
   :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 164
   :title (#("baz" 0 3 (:parent #1)))
   :parent #0)
  (section
   (:begin 171 :end 231 :contents-begin 171 :contents-end 231 :post-blank 0
    :post-affiliated 171 :parent #1)
   (src-block
    (:language "emacs-lisp" :switches nil :parameters nil :begin 171 :end 231 :number-lines nil
     :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil
     :value "(org-element-parse-buffer)\n" :post-blank 0 :post-affiliated 171 :parent #2)))))
#+END_SRC

* Do you know how to list org-mode source blocks with Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-28-do-you-know-how-to-list-org-mode-source-blocks-with-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-09-28 Thu]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=h6YuiSlB2dQ
:END:

#+BEGIN_SRC emacs-lisp
(org-element-parse-buffer)
(org-element-map (org-element-parse-buffer) 'src-block #'identity)
(org-element-map (org-element-parse-buffer) 'src-block
  (lambda (sb) (org-element-property :language sb)))
;; ("bash" "emacs-lisp")

(org-element-property
 :language
 '(src-block (:language "bash" :value "ls -al")))
;; "bash"

;; (lambda (sb) (org-element-property :language sb))
#+END_SRC

#+BEGIN_SRC org
,#+title: Do you know how to list org-mode source blocks with Emacs Lisp?

,* foo
,** foo level 2

- item 1
- item 2
- item 3

,* bar

,#+BEGIN_SRC bash
echo foo bar baz
,#+END_SRC

,* baz

,#+BEGIN_SRC emacs-lisp
;; org-element-parse-buffer
;; org-element-map
;; org-element-property
,#+END_SRC
#+END_SRC

#+BEGIN_SRC emacs-lisp
(org-data
 nil
 (section ...)
 (headline
  ...
  (headline ...))
 (headline
  ...
  (section
   ...
   (src-block
    (:language "bash"
     :switches nil
     :parameters nil
     :begin 132
     :end 176
     :number-lines nil
     :preserve-indent nil
     :retain-labels t
     :use-labels t
     :label-fmt nil
     :value "echo foo bar baz\n"
     :post-blank 0
     :post-affiliated 132
     :parent #2))))
 (headline
  ...
  (section
   ...
   (src-block
    (:language "emacs-lisp"
     :switches nil
     :parameters nil
     :begin 184
     :end 288
     :number-lines nil
     :preserve-indent nil
     :retain-labels t
     :use-labels t
     :label-fmt nil
     :value ";; org-element-parse-buffer\n;; org-element-map\n;; org-element-property\n"
     :post-blank 0
     :post-affiliated 184
     :parent #2)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
((src-block
  (:language "bash"
   :switches nil
   :parameters nil
   :begin 132
   :end 176
   :number-lines nil
   :preserve-indent nil
   :retain-labels t
   :use-labels t
   :label-fmt nil
   :value "echo foo bar baz\n"
   :post-blank 0
   :post-affiliated 132
   :parent ...))
 (src-block
  (:language "emacs-lisp"
   :switches nil
   :parameters nil
   :begin 184
   :end 288
   :number-lines nil
   :preserve-indent nil
   :retain-labels t
   :use-labels t
   :label-fmt nil
   :value ";; org-element-parse-buffer\n;; org-element-map\n;; org-element-property\n"
   :post-blank 0
   :post-affiliated 184
   :parent ...)))
#+END_SRC

* Do you know how to unbind variables and functions in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-29-do-you-know-how-to-unbind-variables-and-functions-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-09-29 Fri]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=qP5CBbqQGHk
:END:

#+BEGIN_SRC emacs-lisp
(setq foo "foo")
foo
(makunbound 'foo)
foo

(defun bar () "bar")
(bar)
(fmakunbound 'bar)
(bar)
#+END_SRC

* How to create a temporary file in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-09-30-how-to-create-a-temporary-file-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-09-30 Sat]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=QUhuPGN_o1k
:END:

#+BEGIN_SRC emacs-lisp
(make-temp-file "foo-") ;; "/tmp/foo-BaXkII"

(let ((file (make-temp-file "foo-")))
  (write-region "foo bar baz" nil file)
  (find-file file))
#+END_SRC

* How to evaluate an expression in Emacs Lisp? (for beginners)
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-10-01-how-to-evaluate-an-expression-in-emacs-lisp-for-beginners/
:MINIBUFFER_CREATED_AT: [2023-10-01 Sun]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=QG9G_dh20Tg
:END:

#+BEGIN_SRC emacs-lisp
;; eval-expression
(buffer-name)
(insert "notes.el")
(insert "foo")
#+END_SRC

* Do you know inferior-emacs-lisp-mode for playing with Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-10-02-do-you-inferior-emacs-lisp-mode-for-playing-with-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-10-02 Mon]
:MINIBUFFER_UPDATED_AT: [2023-10-03 Tue]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=B9anqg6o23M
:END:

- https://twitter.com/xenodium/status/1700047772487934337
- https://xenodium.com

#+BEGIN_SRC text
,*** Welcome to IELM ***  Type (describe-mode) for help.
ELISP> (+ 1 1)
2 (#o2, #x2, ?\C-b)
ELISP> (setq foo "bar")
"bar"
ELISP> foo
"bar"
ELISP> (defun foo () 1)
foo
ELISP> (foo)
1 (#o1, #x1, ?\C-a)
ELISP> (defun foo () "foo bar baz")
foo
ELISP> (foo)
"foo bar baz"
ELISP>
#+END_SRC

* Do you kwow how to generate ISO 8601 dates in Emacs Lisp?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-10-03-do-you-kwow-how-to-generate-iso-8601-dates-in-emacs-lisp/
:MINIBUFFER_CREATED_AT: [2023-10-03 Tue]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=RTs1IhRiKXI
:END:

#+BEGIN_SRC emacs-lisp
(format-time-string "%FT%T%z") ;; "2023-10-03T18:35:07+0200"
(format-time-string "%FT%T%z" nil "UTC") ;; "2023-10-03T16:35:38+0000"
#+END_SRC

* What commands do you use to evaluate Emacs Lisp expressions?
:PROPERTIES:
:ONE: minibuffer-one-episode
:CUSTOM_ID: /2023-10-04-what-commands-do-you-use-to-evaluate-emacs-lisp-expression/
:MINIBUFFER_CREATED_AT: [2023-10-04 Wed]
:MINIBUFFER_YOUTUBE_LINK: https://www.youtube.com/watch?v=pzWOdwNQE5s
:END:

#+BEGIN_SRC emacs-lisp
;; eval-last-sexp
;; eval-defun
;; eval-expression
;; pp-eval-expression
#+END_SRC
